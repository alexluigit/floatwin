#!/bin/sh
FLOATWIN_STATE="$XDG_CACHE_HOME/floatwin"
TERMINAL=false
DIMENSION=1920x1080+0+0

__win_info() { bspc query -T -n $WID | jq "$@" | tr -d '"'; }
__wm_set_rule() { bspc rule -a $CLASS:$INSTANCE -o state=floating rectangle=$DIMENSION sticky=on; }
__wm_unset_rule() { bspc rule -r $CLASS:$INSTANCE; }
__wm_hide_window() { bspc node $WID --flag hidden=on; }
__wm_show_window() { bspc node $WID --flag hidden=off; }

_win_visible() { ! $(__win_info .hidden); }
_wid_expired() {
  wid_instance=$(__win_info .client.instanceName)
  [[ "$wid_instance" != "$INSTANCE" ]]
}
_hide_window() { __wm_hide_window; }
_show_window() {
  xdotool set_desktop_for_window "$WID" "$(xdotool get_desktop)"
  __wm_show_window
  xdotool windowactivate $WID
}
_create_window() {
  killall $APP 2>/dev/null
  __wm_set_rule
  t_cmd=(alacritty --class $CLASS,$INSTANCE)
  [[ "$APP" == "dropterm" ]] || t_cmd+=("-e $APP")
  $TERMINAL && eval "${t_cmd[@]} &" || eval "${CMD[@]} &"
  xdo id -md -N $CLASS -n $INSTANCE > $FLOATWIN_STATE/$APP
  __wm_unset_rule
}
_toggle_or_create() {
  if _wid_expired; then _create_window
  elif _win_visible; then _hide_window
  else _show_window
  fi
}

main() {
  [[ -d "$FLOATWIN_STATE" ]] || mkdir -p $FLOATWIN_STATE
  while getopts "a:b:c:d:i:t" opt; do
    case $opt in
      a) AFTER=$OPTARG;;
      b) BEFORE=$OPTARG;;
      c) CLASS=$OPTARG;;
      d) DIMENSION=$OPTARG;;
      i) INSTANCE=$OPTARG;;
      t) TERMINAL=true;;
    esac
  done
  shift $((OPTIND -1))
  CMD="$@"
  APP=${1:-dropterm}
  CLASS=${CLASS:-$APP}
  INSTANCE=${INSTANCE:-$CLASS}
  WID=$(cat "$FLOATWIN_STATE/$APP" 2>/dev/null)
  [ -n "$BEFORE" ] && ! pgrep "$BEFORE" >/dev/null && eval "$BEFORE &"
  _toggle_or_create
  [ -n "$AFTER" ] && ! pgrep "$AFTER" >/dev/null && eval "$AFTER &" || true
}

main "$@"
